name: Auto Release

on:
  push:
    branches:
      - main
    paths:
      - 'apps/**'
      - 'package.json'
      - 'apps/*/package.json'

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: |
          yarn install --immutable
          yarn workspaces focus --production

      - name: Check for changes
        id: changes
        run: |
          # Check if this is a version bump commit (skip auto-release)
          if git log -1 --pretty=%B | grep -q "chore: auto-increment version"; then
            echo "This is a version bump commit, skipping auto-release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, will release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Auto Release
        if: steps.changes.outputs.should_release == 'true'
        run: |
          echo "ðŸš€ Starting auto-release process..."
          # Configure git identity for GitHub Actions
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # Get current version and increment
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Increment patch version
          NEW_VERSION=$(node -e "
            const [major, minor, patch] = '$CURRENT_VERSION'.split('.').map(Number);
            console.log(\`\${major}.\${minor}.\${patch + 1}\`);
          ")
          echo "New version: $NEW_VERSION"
          
          # Update all package.json files
          node -e "
            const fs = require('fs');
            const path = require('path');
            const newVersion = '$NEW_VERSION';
            
            // Update root package.json
            const rootPkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            rootPkg.version = newVersion;
            fs.writeFileSync('package.json', JSON.stringify(rootPkg, null, 2));
            
            // Update app package.json files
            const apps = ['desktop', 'studio', 'core', 'web'];
            apps.forEach(app => {
              const appPath = path.join('apps', app, 'package.json');
              if (fs.existsSync(appPath)) {
                const appPkg = JSON.parse(fs.readFileSync(appPath, 'utf8'));
                appPkg.version = newVersion;
                fs.writeFileSync(appPath, JSON.stringify(appPkg, null, 2));
                console.log(\`âœ… Updated \${app} to v\${newVersion}\`);
              }
            });
          "
          
          # Commit and tag
          git add .
          git commit -m "chore: auto-increment version to $NEW_VERSION"
          git tag "v$NEW_VERSION"
          git push origin main --follow-tags
          
          echo "ðŸŽ‰ Successfully released v$NEW_VERSION!"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Publish Electron app
        if: steps.changes.outputs.should_release == 'true'
        run: |
          echo "Building studio app..."
          cd apps/studio && yarn build
      
      - name: Publish Electron release
        if: steps.changes.outputs.should_release == 'true'
        run: |
          echo "Publishing Electron release..."
          cd apps/desktop && yarn tsc && yarn prebuild && ELECTRON_BUILDER_CACHE=/tmp/electron-builder-cache npx electron-builder --publish always
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

